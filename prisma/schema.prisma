// Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectType {
  AUTOMATION
  DESIGN
  ELECTRONICS
  GENERAL
  MAKER
  REPAIR
  WEBAPP
  WEBSITE
  WRITING
  OTHER
}

enum TaskStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  BLOCKED
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CostType {
  PARTS
  LABOR
  SOFTWARE
  TOOLS
  CONSUMABLES
  TRAVEL
  MISC
}

enum RelationshipType {
  BLOCKS
  DEPENDS_ON
  RELATED
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String         @unique @db.VarChar(128)
  emailVerified DateTime?
  image         String?
  password      String         @db.VarChar(60)
  role          UserRole       @default(USER)
  accounts      Account[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Tag {
  id                  String             @id @default(cuid())
  name                String             @unique
  projects            Project[]          @relation("ProjectTags")
  milestones          Milestone[]        @relation("MilestoneTags")
  tasks               Task[]             @relation("TaskTags")
  costs               Cost[]             @relation("CostTags")

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Project {
  id                  String             @id @default(cuid())
  name                String
  description         String?            @db.VarChar(2000)
  type                ProjectType        @default(OTHER)
  status              ProjectStatus      @default(PLANNED)
  priority            ProjectPriority    @default(MEDIUM)
  startDate           DateTime?
  dueDate             DateTime?
  budget              Decimal?           @db.Decimal(10, 2)
  actualCost          Decimal            @db.Decimal(10, 2) @default(0.00)
  progress            Decimal            @db.Decimal(10, 2) @default(0.0)
  archived            Boolean            @default(false)

  tags                Tag[]              @relation("ProjectTags")
  tasks               Task[]             @relation("ProjectTasks")
  costs               Cost[]             @relation("ProjectCosts")
  milestones          Milestone[]        @relation("ProjectMilestones")
  
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Task {
  id                  String             @id @default(cuid())
  name                String
  description         String?            @db.VarChar(2000)
  status              TaskStatus         @default(PLANNED)
  priority            TaskPriority       @default(MEDIUM)
  startDate           DateTime?
  dueDate             DateTime?
  progress            Decimal            @db.Decimal(10, 2) @default(0.0)
  completedAt         DateTime?
  projectId           String
  project             Project            @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)
  parentTaskId        String?
  parentTask          Task?              @relation("SubTasks", fields: [parentTaskId], references: [id])
  subTasks            Task[]             @relation("SubTasks")
  archived            Boolean            @default(false)
  order               Int?
  tags                Tag[]              @relation("TaskTags")
  costs               Cost[]             @relation("TaskCosts")
  milestoneId         String?
  milestone           Milestone?         @relation("MilestoneTasks", fields: [milestoneId], references: [id], onDelete: SetNull)
  sourceRelationships TaskRelationship[] @relation("SourceTaskRelations")
  targetRelationships TaskRelationship[] @relation("TargetTaskRelations")

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model Cost {
  id                  String             @id @default(cuid())
  amount              Decimal            @db.Decimal(10, 2)
  type                CostType
  note                String?            @db.VarChar(250)
  date                DateTime?          @default(now())
  projectId           String
  project             Project            @relation("ProjectCosts", fields: [projectId], references: [id], onDelete: Cascade)
  taskId              String?
  task                Task?              @relation("TaskCosts", fields: [taskId], references: [id], onDelete: Cascade)
  tags                Tag[]              @relation("CostTags")

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model TaskRelationship {
  id                  String             @id @default(cuid())
  sourceTaskId        String
  sourceTask          Task               @relation("SourceTaskRelations", fields: [sourceTaskId], references: [id])
  targetTaskId        String
  targetTask          Task               @relation("TargetTaskRelations", fields: [targetTaskId], references: [id])
  relationshipType    RelationshipType
  
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Milestone {
  id                  String             @id @default(cuid())
  name                String   
  description         String?            @db.VarChar(2000)
  dueDate             DateTime? 
  order               Int?
  status              MilestoneStatus    @default(PLANNED)
  progress            Decimal            @db.Decimal(10, 2) @default(0.0)
  projectId           String
  project             Project            @relation("ProjectMilestones", fields: [projectId], references: [id], onDelete: Cascade)
  tasks               Task[]             @relation("MilestoneTasks")
  tags                Tag[]              @relation("MilestoneTags")

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}
